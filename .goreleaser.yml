# .goreleaser.yml
#
project_name: planet-exporter
dist: bin

builds:
  - # Path to main.go file or main package.
    # Default is `.`.
    main: ./cmd/planet-exporter/main.go

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    # Default is the name of the project directory.
    binary: planet-exporter

    # Custom environment variables to be set during the builds.
    # Default is empty.
    env:
      - CGO_ENABLED=0

    # Custom ldflags templates.
    # Default is `-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser`.
    ldflags: |
      -s -w
      -X main.version=v{{.Version}}
      -X github.com/prometheus/common/version.Version=v{{.Version}}
      -X github.com/prometheus/common/version.Revision={{.ShortCommit}}
      -X github.com/prometheus/common/version.Branch=master

    # List of combinations of GOOS + GOARCH + GOARM to ignore.
    # Default is empty.
    ignore:
      - goos: darwin
        goarch: 386
      - goos: linux
        goarch: arm
        goarm: 7
      - goos: windows
        goarch: arm
      - goos: windows
        goarch: arm64
      - goarm: mips64
        gomips: hardfloat

  - id: planet-federator
    main: ./cmd/planet-federator/main.go
    binary: planet-federator
    env:
      - CGO_ENABLED=0
    ldflags: |
      -s -w
      -X main.version=v{{.Version}}

    ignore:
      - goos: darwin
        goarch: 386
      - goos: linux
        goarch: arm
        goarm: 7
      - goos: windows
        goarch: arm
      - goos: windows
        goarch: arm64
      - goarm: mips64
        gomips: hardfloat

  - id: planet-federator-influxdb-to-bq
    main: ./cmd/planet-federator-influxdb-to-bq/main.go
    binary: planet-federator-influxdb-to-bq
    env:
      - CGO_ENABLED=0
    ldflags: |
      -s -w
      -X main.version=v{{.Version}}

    ignore:
      - goos: darwin
        goarch: 386
      - goos: linux
        goarch: arm
        goarm: 7
      - goos: windows
        goarch: arm
      - goos: windows
        goarch: arm64
      - goarm: mips64
        gomips: hardfloat

release:
  github:
  disable: false

  # If set to true, will not auto-publish the release.
  # Default is false.
  draft: true

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # You can change the name of the GitHub release.
  # Default is `{{.Tag}}`
  name_template: '{{.ProjectName}}-v{{.Version}}'

# .goreleaser.yml
archives:
  - # Archive name template.
    # Defaults:
    # - if format is `tar.gz`, `tar.xz`, `gz` or `zip`:
    #   - `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}`
    # - if format is `binary`:
    #   - `{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}`
    name_template: '{{ .ProjectName }}_v{{ .Version }}_{{ .Os }}_{{ .Arch }}'

    # Set to true, if you want all files in the archive to be in a single directory.
    # If set to true and you extract the archive 'goreleaser_Linux_arm64.tar.gz',
    # you get a folder 'goreleaser_Linux_arm64'.
    # If set to false, all files are extracted separately.
    # You can also set it to a custom folder name (templating is supported).
    # Default is false.
    wrap_in_directory: false

    # Archive format. Valid options are `tar.gz`, `tar.xz`, `gz`, `zip` and `binary`.
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    # Default is `tar.gz`.
    format: tar.gz

    # Additional files/template/globs you want to add to the archive.
    # Defaults are any files matching `LICENCE*`, `LICENSE*`,
    # `README*` and `CHANGELOG*` (case-insensitive).
    files:
      - LICENSE*
      - README*
      - CHANGELOG*

snapshot:
  # Allows you to change the name of the generated snapshot
  #
  # Note that some pipes require this to be semantic version compliant (nfpm,
  # for example).
  #
  # Default is `{{ .Tag }}-SNAPSHOT-{{.ShortCommit}}`.
  name_template: '{{ .Version }}-SNAPSHOT-{{ .ShortCommit }}'

checksum:
  name_template: '{{ .ProjectName }}_v{{ .Version }}_checksums.txt'

  # Algorithm to be used.
  # Accepted options are sha256, sha512, sha1, crc32, md5, sha224 and sha384.
  # Default is sha256.
  algorithm: sha256
